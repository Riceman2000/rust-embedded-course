[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# Choose a default "cargo run" tool
# - `probe-rs` provides flashing and defmt via a hardware debugger, and stack unwind on panic
# - elf2uf2-rs loads firmware over USB when the rp2040 is in boot mode
runner = "probe-rs run --chip RP2040 --protocol swd"
# runner = "elf2uf2-rs -d"

rustflags = [
  # Optional alternative linker that flips the .stack and .data sections 
  # of the binary, using it has no impact on performance but makes the program 
  # resistant to stack overflow. Note that just because Rust is "memory safe" 
  # doesn't mean that people that implement low level libraries such as 
  # `cortex_m_rt` will account for all possible invariants, especially on 
  # resource limited processors.
  # "-C", "linker=flip-link",

  # This is needed if your flash or ram addresses are not aligned to 0x10000 in memory.x
  # See https://github.com/rust-embedded/cortex-m-quickstart/pull/95
  # Read about this here https://sourceware.org/binutils/docs-2.42/ld/Options.html
  "-C", "link-arg=--nmagic", 

  # Linker scripts generated by our dependencies
  "-C", "link-arg=-Tlink.x",
  "-C", "link-arg=-Tdefmt.x",

  # Code-size optimizations.
  #   trap unreachable can save a lot of space, but requires nightly compiler.
  #   uncomment the next line if you wish to enable it
  # "-Z", "trap-unreachable=no",
  "-C", "no-vectorize-loops",
  "-Cllvm-args=--inline-threshold=5",
]

[build]
# This is the cross compilation target we will use
# Read about what processors this targets: https://doc.rust-lang.org/nightly/rustc/platform-support/thumbv6m-none-eabi.html
# Read about targets in general: https://doc.rust-lang.org/nightly/rustc/platform-support.html
target = "thumbv6m-none-eabi"

[env]
# The level of debugging that will be compiled in 
DEFMT_LOG = "trace"
